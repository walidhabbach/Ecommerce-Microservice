apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-server-conf
  labels:
    name: prometheus-server-conf
  namespace: monitoring
data:
  prometheus.rules: |-
    groups:
    - name: alert
      rules:
      - alert: service_is_down
        expr: up == 0
        for: 1m
        labels:
          severity: critical
        annotations: 
          summary: Service(s) are down 

      - alert: High Pod Memory
        expr: sum(container_memory_usage_bytes) > 1
        for: 1m
        labels:
          severity: warning
        annotations:
          summary: High Memory Usage

      - alert: High CPU Usage
        expr: sum(rate(container_cpu_usage_seconds_total[1m])) > 0.5
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: High CPU Usage Detected
          description: "CPU usage is above 50% for more than 1 minute."

      - alert: High Disk Usage
        expr: (node_filesystem_size_bytes - node_filesystem_free_bytes) / node_filesystem_size_bytes * 100 > 80
        for: 1m
        labels:
          severity: warning
        annotations:
          summary: High Disk Usage Detected
          description: "Disk usage is above 80% for more than 1 minute."

      - alert: High Network Traffic
        expr: sum(rate(container_network_transmit_bytes_total[1m])) + sum(rate(container_network_receive_bytes_total[1m])) > 10000000
        for: 1m
        labels:
          severity: warning
        annotations:
          summary: High Network Traffic Detected
          description: "Network traffic is above 10 MB/s for more than 1 minute."
          
  prometheus.yml: |-
    global:
      scrape_interval: 5s
      evaluation_interval: 5s
    rule_files:
      - /etc/prometheus/prometheus.rules
    alerting:
      alertmanagers:
      - scheme: http
        static_configs:
        - targets:
          - "alertmanager-service.monitoring.svc:9093"
    
    scrape_configs:
      - job_name: "api-gateway-service"
        metrics_path: "/actuator/prometheus"
        static_configs:
          - targets: ["api-gateway-service.default.svc.cluster.local:8222"]
            labels:
              application: "Api gateway Service Application" 

      - job_name: "discovery-service"
        metrics_path: "/actuator/prometheus"
        static_configs:
          - targets: ["discovery-service.default.svc.cluster.local:8761"]
            labels:
              application: "Discovery Service Application" 

      - job_name: "zipkin-service"
        metrics_path: "/actuator/prometheus"
        static_configs:
          - targets: ["zipkin-service.default.svc.cluster.local:9411"]
            labels:
              application: "zipkin Service Application" 
      
      - job_name: "order-service"
        metrics_path: "/actuator/prometheus"
        static_configs:
          - targets: ["order-service.default.svc.cluster.local:8070"]
            labels:
              application: "Order Service Application" 

      - job_name: "notification-service"
        metrics_path: "/actuator/prometheus"
        static_configs:
          - targets: ["notification-service.default.svc.cluster.local:8040"]
            labels:
              application: "Notification Service Application" 

      - job_name: "customer-service"
        metrics_path: "/actuator/prometheus"
        static_configs:
          - targets: ["customer-service.default.svc.cluster.local:8090"]
            labels:
              application: "Customer Service Application" 

      - job_name: "config-service"
        metrics_path: "/actuator/prometheus"
        static_configs:
          - targets: ["config-service.default.svc.cluster.local:8888"]
            labels:
              application: "Config Service Application" 

      - job_name: "payment-service"
        metrics_path: "/actuator/prometheus"
        static_configs:
          - targets: ["payment-service.default.svc.cluster.local:8060"]
            labels:
              application: "Payment Service Application" 

      - job_name: "product-service"
        metrics_path: "/actuator/prometheus"
        static_configs:
          - targets: ["product-service.default.svc.cluster.local:8050"]
            labels:
              application: "Product Service Application" 
 
            
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_endpoints_name]
          regex: 'node-exporter'
          action: keep
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https
      - job_name: 'kubernetes-nodes'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
      - job_name: 'kube-state-metrics'
        static_configs:
          - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']
      - job_name: 'kubernetes-cadvisor'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
      - job_name: 'kubernetes-service-endpoints'
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name